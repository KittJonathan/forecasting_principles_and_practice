---
title: "2. Time series graphics"
format: html
editor: visual
execute: 
  echo: true
  eval: true
---

<https://otexts.com/fpp3/graphics.html>

# 2.1 `tsibble` objects

```{r}
library(fpp3)
```

```{r}
global_economy
```

```{r}
tourism
```

A `tsibble` contains:

-   an index: time observation about the observation

-   measured variable(s): numbers of interest

-   key variable(s): optional unique identifiers for each series

To create a `tsibble`:

```{r}
mydata <- tsibble(
  year = 2015:2019,
  y = c(123, 39, 78, 52, 110),
  index = year
)
mydata
```

Transform an object into a `tsibble`:

```{r}
mydata <- tibble(
  year = 2015:2019,
  y = c(123, 39, 78, 52, 110)
) |> 
  as_tsibble(index = year)
mydata
```

For observations more frequent than once per year, we need to use a time class function on the index.

```{r}
z <- tibble(
  Month = c("2019 Jan", "2019 Feb", "2019 Mar", "2019 Apr"),
  Observation = c(50, 23, 34, 30)
)
z
```

```{r}
z |> 
  mutate(Month = yearmonth(Month)) |> 
  as_tsibble(index = Month)
```

Common time index variables can be created with these functions:

| Frequency | Function                     |
|-----------|------------------------------|
| Annual    | `start:end`                  |
| Quarterly | `yearquarter()`              |
| Monthly   | `yearmonth()`                |
| Weekly    | `yearweek()`                 |
| Daily     | `as_date()`, `ymd()`         |
| Sub-daily | `as_datetime()`, `ymd_hms()` |

```{r}
prison <- readr::read_csv(
  "https://OTexts.com/fpp3/extrafiles/prison_population.csv")
```

```{r}
prison
```

```{r}
prison |> 
  mutate(Quarter = yearquarter(Date)) |> 
  select(-Date) |> 
  as_tsibble(
    index = Quarter,
    key = c(State, Gender, Legal, Indigenous)
  )
```

```{r}
olympic_running
```

```{r}
olympic_running |> 
  distinct(Sex)
```

```{r}
PBS
```

```{r}
a10 <- PBS |> 
  filter(ATC2 == "A10") |> 
  select(Month, Concession, Type, Cost) |> 
  summarise(TotalC = sum(Cost)) |> 
  mutate(Cost = TotalC / 1e6)
a10
```

The seasonal period:

| Data     | Minute | Hour | Day   | Week   | Year     |
|----------|--------|------|-------|--------|----------|
| Quarters |        |      |       |        | 4        |
| Months   |        |      |       |        | 12       |
| Weeks    |        |      |       |        | 52       |
| Days     |        |      |       | 7      | 365.25   |
| Hours    |        |      | 24    | 168    | 8766     |
| Minutes  |        | 60   | 1440  | 10080  | 525960   |
| Seconds  | 60     | 3600 | 86400 | 604800 | 31557600 |

# 2.2 Time plots

```{r}
a10 |> 
  autoplot(Cost) |> 
  labs(y = "$ (millions)",
       title = "Australian antidiabetic drug saled")
```

```{r}
a10 |> 
  ggplot(aes(x = Month, y = Cost)) +
  geom_point()
```

```{r}
a10 |> 
  ggplot(aes(x = Month, y = Cost)) +
  geom_line()
```

```{r}
a10 |> 
  autoplot(Cost) +
  geom_point()
```

```{r}
a10 |> 
  autoplot(Cost) +
  labs(title = "Antidiabetic drug sales",
       y = "$ million")
```

```{r}
ansett |> 
  autoplot(Passengers)
```

```{r}
ansett |> distinct(Class)
```

```{r}
ansett |> distinct(Airports)
```

```{r}
ansett |> 
  filter(Class == "Economy", Airports == "MEL-SYD") |> 
  mutate(Passengers = Passengers / 1000) |> 
  autoplot(Passengers) +
  labs(title = "Ansett airlines economy class",
       subtitle = "Melbourne-Sydney",
       y = "Passengers ('000)")
```

# 2.3 Time series patterns

<https://otexts.com/fpp3/tspatterns.html>

**Trend**: pattern exists when there is a long-term increase or decrease in the data.

**Seasonal**: pattern exists when a series is influenced by seasonal factors (e.g. the quarter of the year, the month, or day of the week).

**Cyclic**: pattern exists when data exhibit rises and falls that are *not of fixed period* (duration usually of at least 2 years).

Differences between seasonal and cyclic patterns:

-   seasonal pattern constant length; cyclic pattern variable length

-   average length of cycle longer than length of seasonal pattern

-   magnitude of cycle more variable than magnitude of seasonal pattern

```{r}
aus_production |> 
  filter(year(Quarter) >= 1980) |> 
  autoplot(Electricity) +
  labs(y = "GWh", title = "Australian electricity production")
```

```{r}
aus_production |> 
  autoplot(Bricks) +
  labs(y = "million units", title = "Australian clay brick production")
```

```{r}
us_employment |> 
  filter(Title == "Retail Trade", year(Month) >= 1980) |> 
  autoplot(Employed / 1e3) +
  labs(y = "Million people", title = "Retail employment, USA")
```

```{r}
gafa_stock |> 
  filter(Symbol == "AMZN", year(Date) >= 2018) |> 
  autoplot(Close) +
  labs(y = "$US", title = "Amazon closing stock price")
```

```{r}
pelt |> 
  autoplot(Lynx) +
  labs(y = "Number trapped", title = "Annual Canadian Lynx Trappings")
```

> The timing of peaks and troughs is predictable with seasonal data, but unpredictable in the long term with cyclic data.

# 2.4 Seasonal plots

```{r}
a10 |> 
  autoplot(Cost)
```

```{r}
a10 |> 
  gg_season(Cost, labels = "both") + 
  labs(y = "$ million", title = "Seasonal plot: antidiabetic drug sales")
```

Seasonal plot:

-   Data plotted against the individual "seasons" in which the data were observed (in this case a "season" is a month)

-   Something like a time plot except that the data from each season are overlapped

-   Enables the underlying seasonal pattern to be seen more clearly, and also allows any substantial departures from the seasonal pattern to be easily identified

-   In R: `gg_season()`

```{r}
beer <- aus_production |> 
  select(Quarter, Beer) |> 
  filter(year(Quarter) >= 1992)
```

```{r}
beer |> 
  autoplot(Beer) +
  labs(title = "Australian beer production", y = "Megalitres")
```

```{r}
beer |> 
  autoplot(Beer) +
  geom_point() +
  labs(title = "Australian beer production", y = "Megalitres")
```

```{r}
beer |> 
  gg_season(Beer, labels = "right")
```

```{r}
# Victoria electricity data (observed every 30min)
vic_elec
```

```{r}
vic_elec |> 
  autoplot()
```

```{r}
vic_elec |> 
  gg_season(Demand)
```

```{r}
vic_elec |> 
  gg_season(Demand, period = "week")
```

```{r}
vic_elec |> 
  gg_season(Demand, period = "day")
```

# 2.5 Seasonal subseries plots

```{r}
a10 |> 
  autoplot(Cost) +
  labs(y = "$ (millions)", title = "Australian antidiabetic drug sales")
```

```{r}
a10 |> 
  gg_subseries(Cost) +
  labs(y = "$ million", title = "Subseries plot: antidiabetic drug sales")
```

-   Data for each season collected together in time plot as separate time series

-   Enables the underlying seasonal pattern to be seen clearly, and changes in seasonality over time to be visualized

-   In R: `gg_subseries()`

```{r}
beer |> 
  autoplot(Beer)
```

```{r}
beer |> 
  gg_subseries(Beer)
```

```{r}
holidays <- tourism |> 
  filter(Purpose == "Holiday") |> 
  group_by(State) |> 
  summarise(Trips = sum(Trips))
holidays
```

```{r}
holidays |> 
  autoplot(Trips) +
  labs(y = "thousands of trips",
       title = "Australian domestic holiday nights")
```

```{r}
holidays |> 
  gg_season(Trips) +
  facet_wrap(vars(State), nrow = 2, scales = "free_y") +
  labs(y = "Thousands od trips",
       title = "Australian domestic holiday nights")
```

```{r}
holidays |> 
  gg_subseries(Trips) +
  labs(y = "Thousands of trips",
       title = "Australian domestic holiday nights")
```

# 2.6 Scatterplots

```{r}
vic_elec_day_type <- vic_elec |> 
  filter(year(Time) == 2014) |> 
  mutate(
    Day_Type = case_when(
      Holiday ~ "Holiday",
      wday(Date) %in% 2:6 ~ "Weekday",
      TRUE ~ "Weekend"))
vic_elec_day_type
```

```{r}
vic_elec_day_type |> 
  autoplot(Demand) +
  labs(y = "GW")
```

```{r}
vic_elec_day_type |> 
  autoplot(Temperature) +
  labs(y = "Degrees Celsius")
```

```{r}
vic_elec_day_type |> 
  ggplot(aes(x = Temperature, y = Demand)) +
  geom_point() +
  labs(x = "Temperature (degrees Celsius",
       y = "Electricity demand (GW)")
```

```{r}
vic_elec_day_type |> 
  ggplot(aes(x = Temperature, y = Demand, colour = Day_Type)) +
  geom_point() +
  labs(x = "Temperature (degrees Celsius",
       y = "Electricity demand (GW)")
```

```{r}
vic_elec |> 
  filter(year(Time) == 2014) |> 
  autoplot(Temperature) +
  labs(
    y = "Degrees Celsius",
    title = "Half-hourly temperatures: Melbourne, Australia"
  )
```

The correlation coefficient measures the extent of a linear relationship between two variables (lies between -1 and 1).

```{r}
us_change |> 
  GGally::ggpairs(columns = 2:6)
```

```{r}
tourism |> 
  group_by(State) |> 
  summarise(Trips = sum(Trips)) |> 
  ggplot(aes(x = Quarter, y = Trips)) +
  geom_line() +
  facet_grid(vars(State), scales = "free_y") +
  labs(title = "Australian domestic tourism",
       y = "Overnight trips ('000)")
```

# 2.7 Lag plots

```{r}
new_production <- aus_production |> 
  filter(year(Quarter) >= 1992)
new_production
```

```{r}
new_production |> 
  gg_lag(Beer, geom = "point")
```

Each plot shows $y_t$ plotted against $y_{t-k}$ for different values of $k$.

e.g. plot in the upper-left part : yellow points show beer production for Q4 on the y-axis against Q3 of the same year on the x-axis.

```{r}
new_production |> 
  gg_lag(Beer)
```

# 2.8 Autocorrelation

```{r}
new_production |> 
  gg_lag(Beer, geom = "point")
```

-   Each graph shows $y_t$ plotted against $y_{t-k}$ for different values of $k$.

-   The autocorrelations are the correlations associated with these scatterplots.

-   $r_1 =$ Correlation $(y_t,t_{t-1})$

-   $r_2 =$ Correlation $(y_t,t_{t-2})$

-   $r_3 =$ Correlation $(y_t,t_{t-3})$

Sample autocovariance at lag $k$:

$$
c_k=\frac{1}{T}\sum_{t=k+1}^{T}(y_t-\bar{y})(y_{t-k}-\bar{y})
$$

and $r_k=c_k/c_0$

Where $T$ is the length of the time series.

-   $r_1$ indicates how succesive values oy $y$ relate to each other

-   $r_2$ indicates how $y$ values two periods apart relate to each other

-   $r_k$ is almost the same as the sample correlation between $y_t$ and $y_{t-k}$

Results for first 9 lags for beer data:

```{r}
new_production |> 
  ACF(Beer, lag_max = 9)
```

Correlogram:

```{r}
new_production |> 
  ACF(Beer, lag_max = 9) |> 
  autoplot()
```

```{r}
new_production |> 
  ACF(Beer) |> 
  autoplot()
```

-   When data have a trend, the autocorrelations for small lags tend to be large and positive

-   When data are seasonal, the autocorrelations will be larger at the seasonal lags (i.e., at multiples of the seasonal frequency)

-   When data are trended and seasonal, you see a combination of these effects.

```{r}
retail <- us_employment |> 
  filter(Title == "Retail Trade", year(Month) >= 1980)
```

```{r}
retail |> 
  autoplot(Employed)
```

```{r}
retail |> 
  ACF(Employed, lag_max = 48) |> 
  autoplot()
```

-   trend: strongly correlated

-   seasonal: slight peak at multiples of 12 (yearly retail employment peaks)

Google stock price

```{r}
google_2015 <- gafa_stock |> 
  filter(Symbol == "GOOG", year(Date) == 2015) |> 
  select(Date, Close)
```

```{r}
google_2015
```

```{r}
google_2015 |> 
  autoplot(Close)
```

```{r}
google_2015 |> 
  ACF(Close, lag_max = 100)
```

```{r}
google_2015 |> 
  ACF(Close, lag_max = 100) |> 
  autoplot()
```

# 2.9 White noise

Time series that show no autocorrelation are called white noise.

```{r}
set.seed(30)
wn <- tsibble(t = 1:50,
              y = rnorm(50),
              index = t)
wn |> autoplot(y)
```

White noise data is uncorrelated across time with zero mean and constant variance.

```{r}
wn |> 
  ACF(y)
```

```{r}
wn |> 
  ACF(y) |> 
  autoplot()
```

-   Sample autocorrelations for white noise series

-   Expect each autocorrelation to be close to zero

-   Blue lines show 95% critical values

Sampling distribution of $r_k$ for white noise is asymptotically normal with mean 0 and variance 1/T : $N(0, 1/T)$.

-   95% of all $r_k$ for white noise must lie within $\pm1.96/\sqrt{T}$.

-   if this is not the case, the series is probably not white noise

-   common to plot lines at $\pm1.96/\sqrt{T}$ when plotting ACF (these lines are the critical values)

```{r}
pigs <- aus_livestock |> 
  filter(State == "Victoria", Animal == "Pigs", year(Month) >= 2014)
```

```{r}
pigs |> 
  autoplot(Count / 1e3) +
  labs(y = "Thousands", title = "Number of pigs slaughtered in Victoria")
```

```{r}
pigs |> 
  ACF(Count) |> 
  autoplot()
```

# 2.10 Exercises

<https://otexts.com/fpp3/graphics-exercises.html>

## Exercise 1

```{r}
?aus_production
```

Bricks: clay brick production in millions of bricks.

```{r}
?pelt
```

Lynx: the number of Canadian Lynx pelts traded.

```{r}
?gafa_stock
```

Close: The closing price for the stock.

```{r}
?vic_elec
```

Demand: Total electricity demand in MWh.

```{r}
head(aus_production, 2)
```

```{r}
head(pelt, 2)
```

```{r}
head(gafa_stock, 2)
```

```{r}
head(vic_elec, 2)
```

aus_production -\> Quarter

pelt -\> Year

gafa_stock -\> Undefined

vic_elec -\> 30 minutes

```{r}
aus_production |> autoplot(Bricks)
```

```{r}
pelt |> autoplot(Lynx)
```

```{r}
gafa_stock |> autoplot(Close)
```

```{r}
vic_elec |> 
  autoplot(Demand) +
  labs(title = "Total electricity demand",
       x = "Time (30 minutes)",
       y = "Demand 'MWh")
```

## Exercise 2

```{r}
gafa_stock |> 
  slice_max(order_by = Close, n = 1, by = Symbol)
```

## Exercise 3

```{r}
tute1 <- readr::read_csv("tute1.csv")
```

```{r}
head(tute1)
```

Convert the data to time series

```{r}
mytimeseries <- tute1 |> 
  mutate(Quarter = yearquarter(Quarter)) |> 
  as_tsibble(index = Quarter)
```

Construct time series plots of each of the three series

```{r}
mytimeseries |> 
  pivot_longer(cols = -Quarter) |> 
  ggplot(aes(x = Quarter, y = value, colour = name)) +
  geom_line() +
  facet_grid(name ~ ., scales = "free_y")
```

```{r}
mytimeseries |> 
  pivot_longer(cols = -Quarter) |> 
  ggplot(aes(x = Quarter, y = value, colour = name)) +
  geom_line()
```

## Exercise 4

```{r}
^#install.packages("USgas")
```

```{r}
library(USgas)
```

```{r}
us_total_ts <- us_total |> 
  as_tsibble(key = state, index = year)
```

```{r}
us_total_ts |> 
  filter(state %in% c("Maine", "Vermont", "New Hampshire",
                      "Massachusetts", "Connecticut", "Rhode Island")) |> 
  autoplot(y)
```

## Exercise 5

```{r}
tourism <- readxl::read_excel("tourism.xlsx")
```
